import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from './store';
import EmployeeService from '../services/EmployeeService';
import { IEmployee } from '../interfaces/IEmployee';

export enum SliceStatus {
    IDLE = 'idle',
    LOADING = 'loading',
    FAILED = 'failed'
}

export interface EmployeesState {
    value: IEmployee[];
    filtredValues: IEmployee[];
    status: SliceStatus;
}

const initialState: EmployeesState = {
    value: [],
    filtredValues: [],
    status: SliceStatus.IDLE,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getEmployeesAsync = createAsyncThunk(
    'employeesSlice/fetch',
    async () => {
        const response = await EmployeeService.getEmployees();
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const employeesSlice = createSlice({
    name: 'employeesSlice',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
        setEmployees: (state, action: PayloadAction<IEmployee[]>) => {
            state.value = action.payload;
            state.filtredValues = [...state.value];
        },

        addEmployee: (state, action: PayloadAction<IEmployee>) => {
            state.value = [...state.value, action.payload];
            state.filtredValues = [...state.value];
        },

        updateEmployee: (state, action: PayloadAction<IEmployee>) => {
            var empIdx = state.value.findIndex(e => e.id == action.payload.id);
            state.value[empIdx] = action.payload;
            state.filtredValues = [...state.value];
        },

        removeEmployee: (state, action: PayloadAction<string[]>) => {
            state.value = state.value.filter(e => !action.payload.includes(e.id));
            state.filtredValues = [...state.value];
        },

        filterEmployeesByNameOrEmail: (state, action: PayloadAction<string>) => {
            if (action?.payload ?? null) {
                state.filtredValues = [...state.value.filter(e => e.email.indexOf(action.payload) >= 0 || e.name.indexOf(action.payload) >= 0)];
            } else {
                state.filtredValues = [...state.value];
            }
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getEmployeesAsync.pending, (state) => {
                state.status = SliceStatus.LOADING;
            })
            .addCase(getEmployeesAsync.fulfilled, (state, action) => {
                state.status = SliceStatus.IDLE;
                state.value = action.payload ?? [];
                state.filtredValues = action.payload ?? [];
            });
    },
});

export const { setEmployees, addEmployee, removeEmployee, updateEmployee, filterEmployeesByNameOrEmail } = employeesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.employees.value)`
export const selectEmployees = (state: RootState) => state.employees.filtredValues;

export default employeesSlice.reducer;
